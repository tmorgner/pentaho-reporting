<!--===========================================================================
  This is the build file for the pentaho-reporting-legacy-functions project.

  This build file will use the build-res/subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See build-res/subfloor.xml for more details
============================================================================-->
<project name="pentaho-reporting-integration-testcases" basedir="." default="default">

  <description>
    This build file is used to create the API project
    and works with the build-res/subfloor.xml file.
  </description>

  <!-- Define the default location of the common build file -->
  <property name="common.build.file" value="./build-res/subfloor.xml"
    description="This is the location of the standardized build-res/subfloor.xml file"/>

  <!-- Import the build-res/subfloor.xml file which contains all the default tasks -->
  <import file="${common.build.file}"/>

    <!--=======================================================================
        continuous

        Runs a typical continuous integration build including project dist,
        test, and coverage artifacts
        ====================================================================-->
    <target name="continuous" depends="build,publish-local"/>


    <!--=======================================================================
        continuous-testless

        Runs a typical continuous integration build including project dist,
        and coverage artifacts
        ====================================================================-->
    <target name="continuous-testless" />


    <!--=======================================================================
        continuous

        Runs a typical continuous integration build including project dist,
        test, and coverage artifacts
        ====================================================================-->
    <target name="continuous-local" depends="build,publish-local"/>


    <!--=======================================================================
        continuous-testless

        Runs a typical continuous integration build including project dist,
        and coverage artifacts
        ====================================================================-->
    <target name="continuous-local-testless" />

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN build-res/subfloor.xml.
    -->

  <!-- Override default dist target to do a dist-full instead -->
  <target name="dist"/>

     <!-- Need src.dir to exist even though this project only has testsrc -->
     <target name="init" depends="subfloor.init" >
       <mkdir dir="${src.dir}" />
     </target>

    <!-- Needs to handle dist-source and dist-javadoc targets multibuilds
         These do nothing in an testcase build, so don't call out to subfloor
      -->
    <target name="dist-source" depends="dist" />
    <target name="dist-javadoc" depends="dist" />
    <target name="source.zip" />
    <target name="source.targz" />
    <target name="javadoc" />
    <target name="javadoc.zip" />
    <target name="javadoc.targz" />


    <target name="longrun-test" depends="clean-all,resolve">
        <antcall target="test">
            <param name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExecuteLongRunningTest" value="true"/>
            <param name="junit.forkmode" value="${junit.longrun.forkmode}"/>
        </antcall>
    </target>

    <target name="longrun-cobertura" depends="clean-all,resolve">
        <antcall target="cobertura">
            <param name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExecuteLongRunningTest" value="true"/>
            <param name="junit.forkmode" value="${junit.longrun.forkmode}"/>
        </antcall>
    </target>

    <!--=======================================================================
    cobertura.test-instrumented

    Runs tests against instrumented classes and generates xml and html JUnit test reports
    ====================================================================-->
    <target name="cobertura.test-instrumented"
            depends="init-test-reports,install-cobertura,compile,compile-tests,cobertura.instrument-classes">
        <mkdir dir="${instrumented.classes.dir}"/>
        <path id="cobertura.classpath">
            <fileset dir="${subfloor.resources.dir}/cobertura">
                <include name="*.jar"/>
            </fileset>
        </path>
        <junit fork="yes" dir="${basedir}" forkmode="${junit.forkmode}"
               maxmemory="${junit.maxmemory}"
               failureProperty="test.failed"
               haltonfailure="${junit.haltonfailure}">
            <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

            <!-- Specify the name of the coverage data file to use. -->
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser"/>

            <syspropertyset>
                <propertyref prefix="junit.sysprop."/>
                <mapper type="glob" from="junit.sysprop.*" to="*"/>
            </syspropertyset>

            <!--
              Note the classpath order: instrumented classes are before the
              original (uninstrumented) classes.  This is important.
            -->
            <classpath location="${instrumented.classes.dir}"/>
            <classpath location="${classes.dir}"/>
            <classpath location="${testclasses.dir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="cobertura.classpath"/>

            <formatter type="xml"/>
            <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase"/>
            <batchtest todir="${testreports.xml.dir}" unless="testcase">
                <fileset dir="${testsrc.dir}" casesensitive="yes">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${testreports.html.dir}">
            <fileset dir="${testreports.xml.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${testreports.html.dir}"/>
        </junitreport>
    </target>

    <target name="publish-local"/>
    <target name="publish"/>

</project>
