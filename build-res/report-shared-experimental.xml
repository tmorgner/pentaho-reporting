<?xml version="1.0"?>
<!--
  Contains shared definitions for all reporting projects.

  This adds extra operations to the subfloor file.

  It is easier to validate the correctness of a shared file than patching
  separate projects.
  -->
<project name="reporting-shared" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!--=======================================================================
      continuous

      Runs a typical continuous integration build including project dist,
      test, and coverage artifacts
      ====================================================================-->
  <target name="continuous-local" depends="build,publish-local"/>

  <!--=======================================================================
      continuous-testless

      Runs a typical continuous integration build including project dist,
      and coverage artifacts
      ====================================================================-->
  <target name="continuous-local-testless" depends="build-testless,publish-local"/>

  <!--=======================================================================
      continuous-local-junit

      Runs a typical continuous integration build including project dist,
      and test artifacts using JUnit, not cobertura, for maximum speed.
      ====================================================================-->
  <target name="continuous-local-junit" depends="clean-all,resolve,test,dist-source,dist,publish-local"/>

  <!--=======================================================================
      continuous-junit

      Runs a typical continuous integration build including project dist,
      and test artifacts using JUnit, not cobertura, for maximum speed.
      ====================================================================-->
  <target name="continuous-junit" depends="clean-all,resolve,test,dist-source,dist,publish"/>

  <!-- Shared targets for splitting tests into fast and slow tests -->
  <target name="longrun-test" if="junit.longrun.forkmode">
    <antcall target="clean-all"/>
    <antcall target="resolve"/>
    <antcall target="test">
      <param name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExecuteLongRunningTest" value="true"/>
      <param name="junit.forkmode" value="${junit.longrun.forkmode}"/>
    </antcall>
  </target>

  <!-- Shared targets for splitting tests into fast and slow tests -->
  <target name="longrun-cobertura" if="junit.longrun.forkmode">
    <antcall target="clean-all"/>
    <antcall target="resolve"/>
    <antcall target="cobertura">
      <param name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExecuteLongRunningTest" value="true"/>
      <param name="junit.forkmode" value="${junit.longrun.forkmode}"/>
    </antcall>
  </target>


  <!--=======================================================================
      create-pom

      Creates the POM file for publishing the jar file to a Maven2 repository.
      (Patched for CM-519)
      ====================================================================-->
  <target name="create-pom" depends="install-ivy">
    <ivy:makepom ivyfile="${ivyfile}" pomfile="${dist.dir}/pom.xml">
      <mapping conf="default_internal" scope="compile"/>
      <mapping conf="default_external" scope="compile"/>
      <mapping conf="default" scope="compile"/>
      <mapping conf="runtime" scope="runtime"/>
      <mapping conf="test" scope="test"/>
    </ivy:makepom>
  </target>

  <!-- Until CM-466 is fixed, hot-patch it -->
  <target name="install-ivy" depends="subfloor.install-ivy">
    <ivy:settings url="${ivy.settingsurl}"/>
  </target>

  <!-- Fixes antcall not passing down the ivy-refs and thus making ivy resolve again for no reason at all -->
  <target name="publish-nojar" depends="install-antcontrib,create-pom">
    <antcall target="publish-nojar.internal" inheritRefs="false" inheritAll="false"/>

    <if>
      <equals arg1="${tests.publish}" arg2="true"/>
      <then>
        <antcall target="publish-nojar.test" inheritRefs="false" inheritAll="false">
          <param name="ivy.artifact.id" value="${ivy.artifact.id}-test"/>
        </antcall>
      </then>
    </if>
  </target>

  <!--

   Start of highly experimental features that speed up the build process. Only use these if you
   care about fast response times of your builds and if you don't care about consuming multiple cores.

   These definitions cut some corners to make the build even faster:

    - Skip JUnit HTML report generation - this is not needed on a CI build
    - Skip generation of source-zip and source-tar.gz archives - I know no consumer of these artifacts
    - Run Compilation of sources and copying of resources in parallel
    - Run Unit tests in parallel
    - Use ivy to publish artifacts to a maven repository instead of using an external maven process.

    -->

  <property name="javac.fork" value="false" description="Do not fork the compiler by default"/>
  <property name="javac.deprecation" value="false"
            description="Disable deprecation, can be enabled via xlint option if needed."/>
  <property name="junit.parallel" value="true"/>
  <property name="junit.maxThreads" value="4"/>
  <property name="junit.skipHtmlReport" value="true"/>

  <!--
    Fixes the publishing of SNAPSHOT artifacts on a Maven 3 repository. Maven 3 no longer supports non-unique snapshots and 
    All snapshots of a release are expected to be published atomically and are grouped together via the maven-metadata.xml.
   
    If you publish separate artifacts in separate runs, you effectively publish several snapshots with missing parts. A 
    Maven resolver will not be able to recover from that.
  -->
  <!-- experimental publish -->
  <target name="publish-nojar.internal" depends="install-antcontrib,resolve,create-pom">
    <sequential>
      <copy file="${dist.dir}/pom.xml" tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.pom"/>
      <ivy:deliver conf="*(public)" deliverpattern="${dist.dir}/${ivy.artifact.id}-[revision](-[classifier]).ivy.xml"/>
      <ivy:publish resolver="${ivy.repository.id}"
                   srcivypattern="${dist.dir}/${ivy.artifact.id}-[revision](-[classifier]).ivy.xml"
                   pubrevision="${project.revision}" overwrite="true" forcedeliver="false" warnonmissing="yes"
                   haltonmissing="no">
        <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]"/>
        <artifact name="${ivy.artifact.id}" type="ivy" ext="ivy.xml"/>
        <artifact name="${ivy.artifact.id}" type="pom" ext="pom"/>
      </ivy:publish>
    </sequential>

    <antcall target="maven-publish.post"/>
  </target>

  <target name="publish-nojar.test" depends="install-antcontrib,resolve,create-pom">
    <sequential>
      <copy file="${dist.dir}/pom.xml" tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.pom"/>
      <!--
       Ivy has an unspoken and undocumented relationship between deliver and publish and if you publish
       more than one artifact in a project, they must be delivered to different files, and you must specify
       that file in the publish task, or it will default to the undocumented default, and thus mixes artifact
       publications wildly.
       -->
      <antcall target="resolve" inheritRefs="true"/>

      <ivy:deliver conf="*(public)" deliverpattern="${dist.dir}/${ivy.artifact.id}-[revision](-[classifier]).ivy.xml"/>
      <ivy:publish resolver="${ivy.repository.id}"
                   srcivypattern="${dist.dir}/${ivy.artifact.id}-[revision](-[classifier]).ivy.xml"
                   pubrevision="${project.revision}" overwrite="true" forcedeliver="false" warnonmissing="yes"
                   haltonmissing="no">
        <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]"/>
        <artifact name="${ivy.artifact.id}" type="ivy" ext="ivy.xml"/>
        <artifact name="${ivy.artifact.id}" type="pom" ext="pom"/>
      </ivy:publish>
    </sequential>

    <antcall target="maven-publish.post"/>
  </target>

  <target name="ivy.deliver" depends="resolve">
    <!-- not needed anymore, this is done before publish -->
  </target>

  <!-- Don't produce source.zip or source.tar.gz files - no one is consuming them anyway -->
  <target name="dist-source" depends="source.jar"/>

  <!-- Make the compiler configurable -->
  <target name="compile.fix-compiler-settings" depends="install-antcontrib">
    <if>
      <matches string="${javac.source}" pattern="\d"/>
      <then>
         <property name="strict.javac.source" value="1.${javac.source}"/>
      </then>
      <else>
         <property name="strict.javac.source" value="${javac.source}"/>
      </else>
    </if>
    <if>
      <matches string="${javac.target}" pattern="\d"/>
      <then>
         <property name="strict.javac.target" value="1.${javac.target}"/>
      </then>
      <else>
         <property name="strict.javac.target" value="${javac.target}"/>
      </else>
    </if>
  </target>

  <target name="compile.compile" depends="init,compile.fix-compiler-settings">
    <echo>Compiler-override: ${build.compiler}</echo>
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="${javac.fork}"
           memorymaximumsize="${javac.maxmemory}"
           source="${strict.javac.source}"
           target="${strict.javac.target}">
      <classpath>
        <path refid="classpath"/>
      </classpath>
      <src path="${src.dir}"/>
      <compilerarg value="${javac.xlint}"/>
    </javac>
  </target>

  <target name="compile-tests" depends="init-tests, compile.fix-compiler-settings">
    <javac destdir="${testclasses.dir}"
           debug="true"
           optimize="false"
           source="${strict.javac.source}"
           target="${strict.javac.target}"
           fork="${javac.fork}">
      <src path="${testsrc.dir}" />
      <classpath refid="test.classpath" />
    </javac>

    <!-- Copy the non-java files from the source directory to the test classes directory
-->
    <copy todir="${testclasses.dir}">
      <fileset dir="${testsrc.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>


  <!-- Index the contents for faster access -->
  <target name="jar.test"
          if="tests.publish">
    <antcall target="compile-tests" inheritRefs="true"/>
    <jar destfile="${dist.dir}/${ivy.artifact.id}-test-${project.revision}.jar" manifest="${dist.manifest.file}"
         index="true">
      <fileset dir="${testclasses.dir}"/>
    </jar>
  </target>

  <!-- Index the contents for faster access -->
  <target name="jar.main"
          depends="compile,set-build.id,generate.manifest">
    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" manifest="${dist.manifest.file}"
         index="true">
      <fileset dir="${classes.dir}"/>
    </jar>
  </target>

  <!--=======================================================================
      test

      Compiles and runs all the tests for the project
      This makes test run in parallel.
      ====================================================================-->
  <target name="test" depends="install-antcontrib,compile,compile-tests, init-test-reports"
          description="Compiles and runs unit tests">
    <antcall target="test.execute.all" inheritRefs="true"/>
    <antcall target="test.execute.singletest" inheritRefs="true"/>

    <if>
      <istrue value="${junit.skipHtmlReport}"/>
      <then>
        <echo>Skipping JUnit test generation. Generate it via 'ant test.report'.</echo>
      </then>
      <else>
        <antcall target="test.report" inheritRefs="true"/>
      </else>
    </if>
  </target>

  <target name="test.report">
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <target name="test.execute.all" unless="testcase">
    <if>
      <istrue value="${junit.parallel}"/>
      <then>
        <antcall target="test.execute.all.parallel" inheritRefs="true"/>
      </then>
      <else>
        <antcall target="test.execute.all.singlethreaded" inheritRefs="true"/>
      </else>
    </if>
  </target>

  <target name="test.execute.all.singlethreaded">
    <junit maxmemory="${junit.maxmemory}"
           dir="${junit.base.dir}"
           fork="yes"
           forkmode="${junit.forkmode}"
           failureProperty="test.failed"
           haltonfailure="${junit.haltonfailure}"
           haltonerror="${junit.haltonerror}"
           printsummary="yes">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

      <syspropertyset>
        <propertyref prefix="junit.sysprop."/>
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <classpath refid="test.classpath"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test.execute.singletest" if="testcase">
    <junit maxmemory="${junit.maxmemory}"
           dir="${junit.base.dir}"
           fork="yes"
           forkmode="${junit.forkmode}"
           failureProperty="test.failed"
           haltonfailure="${junit.haltonfailure}"
           haltonerror="${junit.haltonerror}"
           printsummary="yes">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

      <syspropertyset>
        <propertyref prefix="junit.sysprop."/>
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <classpath refid="test.classpath"/>
      <formatter type="xml"/>
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase"/>
    </junit>
  </target>

  <target name="test.execute.all.parallel">
    <foreach target="test.execute-junit"
             maxthreads="${junit.maxThreads}"
             inheritall="true"
             inheritrefs="true"
             parallel="${junit.parallel}"
             param="test.source.absolute">
      <path>
        <dirset dir="${testsrc.dir}">
          <include name="**"/>
          <scriptselector language="javascript">
            <![CDATA[
            importClass(java.io.File);

            var filelist = file.list();
            self.setSelected(false);
            if (filelist != null) {
              var skip = false;
              for (var i = 0; !skip && i < filelist.length; i += 1) {
                var child = filelist[i];
                if (child.endsWith("Test.java")) {
                  self.setSelected(true);
                  skip = true;
                }
              }
            }
            ]]>
          </scriptselector>
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="test.execute-junit">
    <pathconvert property="test.source.relative">
      <path>
        <pathelement location="${test.source.absolute}"/>
      </path>
      <map from="${testsrc.dir}/" to=""/>
    </pathconvert>

    <junit maxmemory="${junit.maxmemory}"
           dir="${junit.base.dir}"
           fork="yes"
           forkmode="${junit.forkmode}"
           failureProperty="test.failed"
           haltonfailure="${junit.haltonfailure}"
           haltonerror="${junit.haltonerror}"
           printsummary="yes">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

      <syspropertyset>
        <propertyref prefix="junit.sysprop."/>
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <classpath refid="test.classpath"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${testreports.xml.dir}">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="${test.source.relative}/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

</project>
